{"version":3,"sources":["src/Ball.js","src/Paddle.js","src/index.js"],"names":["INITIAL_VELOCITY","player1","player2","winner","Ball","exports","default","_createClass","ballElement","_classCallCheck","reset","key","get","parseFloat","getComputedStyle","getPropertyValue","set","value","style","setProperty","rect","top","y","direction","x","bottom","innerHeight","Math","abs","heading","random","PI","cos","sin","velocity","getBoundingClientRect","time_diff","paddleCor","right","window","innerWidth","left","i","length","isCollision","console","log","rect1","rect2","min","max","Paddle","paddle","s","q","_Ball","_interopRequireDefault","require","_Paddle","e","__esModule","p1","document","querySelector","ball","getElementById","paddle1","win","prev_time","play","update","time","game_over","playerLose","addEventListener","event","code","requestAnimationFrame","paddlePos","offsetLeft","moveUp","moveDown"],"mappings":"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","file":"src.ff5192e2.js","sourceRoot":"..","sourcesContent":["const INITIAL_VELOCITY = 0.055;\r\nlet player1 = 0;\r\nlet player2 = 0;\r\nlet winner = {};\r\n//const VELCOITY_INC = 0.000001\r\nexport default class Ball {\r\n  constructor(ballElement) {\r\n    this.ballElement = ballElement;\r\n    this.reset();\r\n  }\r\n\r\n  get x() {\r\n    return parseFloat(\r\n      getComputedStyle(this.ballElement).getPropertyValue(\"--x\")\r\n    );\r\n    //get the variable --x value from css for the ball element and convert into float and return\r\n  }\r\n  set x(value) {\r\n    this.ballElement.style.setProperty(\"--x\", value);\r\n    //set the current position of the ball on x axis\r\n  }\r\n  get y() {\r\n    return parseFloat(\r\n      getComputedStyle(this.ballElement).getPropertyValue(\"--y\")\r\n    );\r\n    //get the variable --x value from css for the ball element and convert into float and return\r\n  }\r\n  set y(value) {\r\n    this.ballElement.style.setProperty(\"--y\", value);\r\n    //set the current position of the ball on x axis\r\n  }\r\n  reset() {\r\n    const rect = this.rect();\r\n    if (rect.top <= 0) {\r\n      this.y = 5;\r\n      this.direction = { x: 0, y: 10 };\r\n    } else if (rect.bottom >= innerHeight) {\r\n      this.y = 95;\r\n      this.direction = { x: 0, y: 90 };\r\n    } else {\r\n      this.y = 50;\r\n      this.direction = { x: 0, y: 0 };\r\n    }\r\n    this.x = 50;\r\n\r\n    while (\r\n      Math.abs(this.direction.x) <= 0.2 ||\r\n      Math.abs(this.direction.x) >= 0.9\r\n    ) {\r\n      const heading = random(0, 2 * Math.PI);\r\n      this.direction = { x: Math.cos(heading), y: Math.sin(heading) };\r\n    }\r\n\r\n    this.velocity = INITIAL_VELOCITY;\r\n    player1 = 0;\r\n    player2 = 0;\r\n  }\r\n  rect() {\r\n    return this.ballElement.getBoundingClientRect();\r\n  }\r\n  update(time_diff, paddleCor) {\r\n    this.x += this.direction.x * time_diff * this.velocity;\r\n    this.y += this.direction.y * this.velocity * time_diff;\r\n    const rect = this.rect();\r\n    if (rect.right >= window.innerWidth || rect.left <= 0) {\r\n      this.direction.x *= -1;\r\n    }\r\n    //  if(paddleCor.some(r=>isCollision(r,rect)))\r\n    //  {\r\n    //     this.direction.y*=-1;\r\n    //  }\r\n    //   }\r\n\r\n    // for (let i = 0; i < paddleCor.length; i++) {\r\n    //     if (isCollision(paddleCor[i], rect)) {\r\n    //       // Determine which side of the paddle the ball hit\r\n    //       const paddleCenter = (paddleCor[i].left + paddleCor[i].right) / 2;\r\n    //       const ballCenter = (rect.left + rect.right) / 2;\r\n    //       const offset = ballCenter - paddleCenter;\r\n    //       console.log();\r\n    //       // Update ball direction based on which side of the paddle was hit\r\n\r\n    //       this.direction.y *= -1;\r\n    //       break; // Only handle collision with one paddle\r\n    //     }\r\n    //   }\r\n    // }\\\r\n\r\n    for (let i = 1; i < paddleCor.length; i++) {\r\n      if (isCollision(paddleCor[i], rect)) {\r\n        player2 += 1;\r\n        console.log(\"player_2 : \" + player2);\r\n        this.direction.y *= -1;\r\n      }\r\n      if (isCollision(paddleCor[i - 1], rect)) {\r\n        player1 += 1;\r\n        console.log(\"player_1 : \" + player1);\r\n        this.direction.y *= -1;\r\n      }\r\n    }\r\n  }\r\n\r\n  maxScore() {\r\n    winner[\"player\"] = player1 >= player2 ? player1 : player2;\r\n  }\r\n}\r\nfunction isCollision(rect1, rect2) {\r\n  return (\r\n    rect1.left <= rect2.right &&\r\n    rect1.right >= rect2.left &&\r\n    rect1.top <= rect2.bottom &&\r\n    rect1.bottom >= rect2.top\r\n  );\r\n}\r\nfunction random(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n","export default class Paddle {\r\n  constructor(paddle) {\r\n    this.paddle = paddle;\r\n  }\r\n  moveUp(value) {\r\n    const s =\r\n      parseFloat(getComputedStyle(this.paddle).getPropertyValue(\"--posLeft\")) +\r\n      value;\r\n    this.paddle.style.setProperty(\"--posLeft\", s);\r\n  }\r\n  moveDown(value) {\r\n    const q =\r\n      parseFloat(getComputedStyle(this.paddle).getPropertyValue(\"--posLeft\")) +\r\n      value;\r\n    this.paddle.style.setProperty(\"--posLeft\", q);\r\n  }\r\n  rect() {\r\n    return this.paddle.getBoundingClientRect();\r\n  }\r\n\r\n  reset() {\r\n    this.paddle.style.setProperty(\"--posLeft\", 110);\r\n  }\r\n}\r\n","//update loop\r\n\r\nimport Ball from \"./Ball.js\";\r\nimport Paddle from \"./Paddle.js\";\r\n\r\nconst p1 = document.querySelector(\"#player-paddle1\");\r\nconst ball = new Ball(document.getElementById(\"ball\")); //create the new ball element with ball id div\r\nconst paddle = new Paddle(document.getElementById(\"player-paddle1\"));\r\nconst paddle1 = new Paddle(document.getElementById(\"player-paddle2\"));\r\nlet win = null;\r\nlet prev_time = null;\r\nlet play = false;\r\nfunction update(time) {\r\n  if (prev_time != null) {\r\n    const time_diff = time - prev_time;\r\n    if (play == true) {\r\n      ball.update(time_diff, [paddle.rect(), paddle1.rect()]);\r\n    }\r\n    if (game_over()) {\r\n      playerLose();\r\n\r\n      play = false;\r\n      document.addEventListener(\"keydown\", function (event) {\r\n        if (event.code === \"Enter\" || event.key === \"Enter\") {\r\n          play = true;\r\n          window.requestAnimationFrame(update);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  prev_time = time;\r\n  window.requestAnimationFrame(update);\r\n}\r\n\r\nfunction game_over() {\r\n  const rect = ball.rect();\r\n  return rect.bottom >= window.innerHeight || rect.top <= 0;\r\n}\r\n\r\nfunction playerLose() {\r\n  ball.reset();\r\n  paddle.reset();\r\n  paddle1.reset();\r\n}\r\ndocument.addEventListener(\"keydown\", (event) => {\r\n  let paddlePos = p1.offsetLeft;\r\n  const paddleHeight = 100;\r\n  if (event.key == \"a\" && paddlePos > 20) {\r\n    paddle.moveUp(-10);\r\n    paddle1.moveUp(-10);\r\n  }\r\n  if (event.key == \"d\" && paddlePos < window.innerWidth - 61) {\r\n    paddle.moveDown(10);\r\n    paddle1.moveDown(10);\r\n  }\r\n});\r\ndocument.addEventListener(\"keydown\", function (event) {\r\n  if (event.code === \"Enter\" || event.key === \"Enter\") {\r\n    play = true;\r\n\r\n    window.requestAnimationFrame(update);\r\n  }\r\n});\r\n"]}